{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"MkDocs PDF Export Plugin The pdf-export plugin will export all markdown pages in your MkDocs repository as PDF files using WeasyPrint . The exported documents support many advanced features missing in most other PDF exports, such as a PDF Index and support for CSS paged media module . MkDocs >= 1.0 Python >= 3.4 WeasyPrint >= 44 Installation Install the package with pip: pip install mkdocs-pdf-export-plugin Enable the plugin in your mkdocs.yml : plugins: - search - pdf-export Note: If you have no plugins entry in your config file yet, you'll likely also want to add the search plugin. MkDocs enables it by default if there is no plugins entry set, but now you have to enable it explicitly. More information about plugins in the MkDocs documentation . Contributing From reporting a bug to submitting a pull request: every contribution is appreciated and welcome. Report bugs, ask questions and request features using Github issues . If you want to contribute to the code of this project, please read the Contribution Guidelines . Special thanks Special thanks go to Stephan Hauser for the original development of this plugin. Special thanks go to Lukas Geiter for developing the mkdocs-awesome-pages-plugin which was used as a base and for convincing Stephan Hauser to write a plugin for this.","title":"Intro"},{"location":"index.html#mkdocs-pdf-export-plugin","text":"The pdf-export plugin will export all markdown pages in your MkDocs repository as PDF files using WeasyPrint . The exported documents support many advanced features missing in most other PDF exports, such as a PDF Index and support for CSS paged media module . MkDocs >= 1.0 Python >= 3.4 WeasyPrint >= 44","title":"MkDocs PDF Export Plugin "},{"location":"index.html#installation","text":"Install the package with pip: pip install mkdocs-pdf-export-plugin Enable the plugin in your mkdocs.yml : plugins: - search - pdf-export Note: If you have no plugins entry in your config file yet, you'll likely also want to add the search plugin. MkDocs enables it by default if there is no plugins entry set, but now you have to enable it explicitly. More information about plugins in the MkDocs documentation .","title":"Installation"},{"location":"index.html#contributing","text":"From reporting a bug to submitting a pull request: every contribution is appreciated and welcome. Report bugs, ask questions and request features using Github issues . If you want to contribute to the code of this project, please read the Contribution Guidelines .","title":"Contributing"},{"location":"index.html#special-thanks","text":"Special thanks go to Stephan Hauser for the original development of this plugin. Special thanks go to Lukas Geiter for developing the mkdocs-awesome-pages-plugin which was used as a base and for convincing Stephan Hauser to write a plugin for this.","title":"Special thanks"},{"location":"options.html","text":"Options Pass in options through mkdocs.yml : plugins: - pdf-export: verbose: true media_type: print enabled_if_env: ENABLE_PDF_EXPORT verbose default: false Setting this to true will show all WeasyPrint debug messages during the build. media_type default: print This option allows you to use a different CSS media type (or a custom one like pdf-export ) for the PDF export. enabled_if_env default: not set Setting this option will enable the build only if there is an environment variable set to 1. This is useful to disable building the PDF files during development, since it can take a long time to export all files. combined default: false Setting this to true will combine all pages into a single PDF file. All download links will point to this file. combined_output_path default: pdf/combined.pdf This option allows you to use a different destination for the combined PDF file. Has no effect when combined is set to false . theme_handler_path default: not set This option allows you to specify a custom theme handler module. This path must be relative to your project root (See example below). mkdocs.yml : plugins: - pdf-export: theme_handler_path: theme-handler.py project-root \u251c\u2500\u2500 theme-handler.py \u251c\u2500\u2500 docs \u251c\u2500\u2500 mkdocs.yml \u251c\u2500\u2500 site . .","title":"Options"},{"location":"options.html#options","text":"Pass in options through mkdocs.yml : plugins: - pdf-export: verbose: true media_type: print enabled_if_env: ENABLE_PDF_EXPORT","title":"Options"},{"location":"options.html#verbose","text":"default: false Setting this to true will show all WeasyPrint debug messages during the build.","title":"verbose"},{"location":"options.html#media_type","text":"default: print This option allows you to use a different CSS media type (or a custom one like pdf-export ) for the PDF export.","title":"media_type"},{"location":"options.html#enabled_if_env","text":"default: not set Setting this option will enable the build only if there is an environment variable set to 1. This is useful to disable building the PDF files during development, since it can take a long time to export all files.","title":"enabled_if_env"},{"location":"options.html#combined","text":"default: false Setting this to true will combine all pages into a single PDF file. All download links will point to this file.","title":"combined"},{"location":"options.html#combined_output_path","text":"default: pdf/combined.pdf This option allows you to use a different destination for the combined PDF file. Has no effect when combined is set to false .","title":"combined_output_path"},{"location":"options.html#theme_handler_path","text":"default: not set This option allows you to specify a custom theme handler module. This path must be relative to your project root (See example below). mkdocs.yml : plugins: - pdf-export: theme_handler_path: theme-handler.py project-root \u251c\u2500\u2500 theme-handler.py \u251c\u2500\u2500 docs \u251c\u2500\u2500 mkdocs.yml \u251c\u2500\u2500 site . .","title":"theme_handler_path"}]}